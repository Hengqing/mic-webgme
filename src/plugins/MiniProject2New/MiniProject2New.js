/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Tue Nov 29 2016 18:31:05 GMT-0600 (Central Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of MiniProject2New.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin MiniProject2New.
     * @constructor
     */
    var MiniProject2New = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    MiniProject2New.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    MiniProject2New.prototype = Object.create(PluginBase.prototype);
    MiniProject2New.prototype.constructor = MiniProject2New;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    MiniProject2New.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject;


        // Using the logger.
        self.logger.debug('This is a debug message.');
        self.logger.info('This is an info message.');
        self.logger.warn('This is a warning message.');
        self.logger.error('This is an error message.');

        // Using the coreAPI to make changes.
        nodeObject = self.activeNode;

        // (1)
        // self.core.setAttribute(nodeObject, 'name', 'My new obj');
        // self.core.setRegistry(nodeObject, 'position', {x: 70, y: 70});

        // (2)
        self.metaNodeInfo = []; // Final result
        self.metaNodes = []; // Final result
        var artifact;
        self.loadNodeMap(self.rootNode)
            .then(function (nodes) {
                self.printChildrenRec(self.rootNode, nodes, '', 1);
                // Here data has been added metaNodeInfo.
                self.printMetaNodes(self.rootNode, nodes); //
                var metaNodeInfoJson = JSON.stringify(self.metaNodeInfo, null, 4);
                var metaNodesJson = JSON.stringify(self.metaNodes, null, 4); //
                artifact = self.blobClient.createArtifact('project-data');
                return artifact.addFiles({'tree.json': metaNodeInfoJson, 'meta.json': metaNodesJson});
            })
            .then(function (fileHash) {
                self.result.addArtifact(fileHash);
                return artifact.save()
            })
            .then(function (artifactHash) {
                self.result.addArtifact(artifactHash);
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                // (3)
                self.logger.error(err.stack);
                // Result success is false at invocation.
                callback(err, self.result);
            });
    };

    MiniProject2New.prototype.loadNodeMap = function (node) {
        var self = this; 
        return self.core.loadSubTree(node)
           .then(function (nodeArr) {
               var nodes = {},
                   i;
               for (i = 0; i < nodeArr.length; i += 1) {
                   nodes[self.core.getPath(nodeArr[i])] = nodeArr[i];
               }

               return nodes;
           });
    };

    MiniProject2New.prototype.printChildrenRec = function (root, nodes, indent, level) {
        var self = this,
            metaType,
            children = [],
            childrenPaths,
            childNode,
            child = {};

        indent = indent || '';
        childrenPaths = self.core.getChildrenPaths(root);
        self.logger.info(indent, nameOfMetaNode, 'has', childrenPaths.length, 'children.');

        var nameOfMetaNode = self.core.getAttribute(root, 'name');
        var idOfMetaNode = self.core.getRelid(root);
        var isMeta = self.core.isMetaNode(root);

        // K-branches search tree
        for (var i = 0; i < childrenPaths.length; i += 1) {
            childNode = nodes[childrenPaths[i]];
            children.push(self.printChildrenRec(childNode, nodes, indent + '  ', level + 1));
        }

        if (level == 1) { // The Root
            child = ({name: nameOfMetaNode, children: children});
            self.metaNodeInfo.push(child);
        } else if (isMeta) {
            metaType = nameOfMetaNode;
            child[idOfMetaNode] = ({name: nameOfMetaNode, isMeta: isMeta, metaType: metaType, children: children});
        } else {
            metaType = self.core.getAttribute(self.core.getBase(root), 'name');
            if (self.core.isConnection(root)) { // The link
                var dstNode = self.core.getPointerPath(root, 'dst');
                var dstName = self.core.getAttribute(nodes[dstNode], 'name');
                var srcNode = self.core.getPointerPath(root, 'src');
                var srcName = self.core.getAttribute(nodes[srcNode], 'name');
                child[idOfMetaNode] = ({name: nameOfMetaNode, isMeta: isMeta, metaType: metaType, src: srcName, dst: dstName});
            } else {
                child[idOfMetaNode] = ({name: nameOfMetaNode, isMeta: isMeta, metaType: metaType, children: children});
            }
        }
 
        return child;
    };

    MiniProject2New.prototype.printMetaNodes = function (root, nodes) {
        var self = this,
            childrenPaths,
            childNode,
            baseNode,
            baseName,
            child = {};

        childrenPaths = self.core.getChildrenPaths(root);
        var nameOfMetaNode = self.core.getAttribute(root, 'name');
        var pathOfMetaNode = self.core.getPath(root);
        var isMeta = self.core.isMetaNode(root);

        for (var i = 0; i < childrenPaths.length; i += 1) {
            childNode = nodes[childrenPaths[i]];
            self.printMetaNodes(childNode, nodes);
        }

        if (isMeta) {
            baseNode = self.core.getPointerPath(root,'base');
            if (baseNode) {
                baseName = self.core.getAttribute(nodes[baseNode], 'name');
            } else {
                baseName = "null";
            }

            child = ({name: nameOfMetaNode, path: pathOfMetaNode, nbrOfChildren: childrenPaths.length, base: baseName});
            self.metaNodes.push(child);
        }

        return child;
    };

    return MiniProject2New;
});
